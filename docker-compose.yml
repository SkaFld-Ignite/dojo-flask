version: '3.8'

services:
  # Redis for job queuing
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-video_chaptering}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask backend application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-video_chaptering}
      - REDIS_URL=redis://redis:6379/0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://*.vercel.app}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - MODEL_CACHE_DIR=/app/models
      - UPLOAD_FOLDER=/app/storage/uploads
      - PROCESSED_FOLDER=/app/storage/processed
    ports:
      - "8000:8000"
    volumes:
      - ./storage:/app/storage
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background processing
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A backend.src.ai.celery_worker.celery worker --loglevel=info --concurrency=2
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-video_chaptering}
      - REDIS_URL=redis://redis:6379/0
      - MODEL_CACHE_DIR=/app/models
      - UPLOAD_FOLDER=/app/storage/uploads
      - PROCESSED_FOLDER=/app/storage/processed
    volumes:
      - ./storage:/app/storage
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy

  # Celery monitoring (optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A backend.src.ai.celery_worker.celery flower --port=5555
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker

volumes:
  postgres_data:
  redis_data: 